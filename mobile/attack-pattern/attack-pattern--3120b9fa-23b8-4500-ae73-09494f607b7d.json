{
	"type": "attack-pattern",
	"id": "attack-pattern--3120b9fa-23b8-4500-ae73-09494f607b7d",
	"created": "2020-02-11T18:46:24.434Z",
	"created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
	"description": "Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc/<PID>/maps` file shows how memory is mapped within the process’s virtual address space. And `/proc/<PID>/mem`, exposed for debugging purposes, provides access to the process’s virtual address space.(Citation: Picus Labs Proc cump 2022)(Citation: baeldung Linux proc map 2022)\n\nWhen executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as <code>grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1</code>, to look for fixed strings in memory structures or cached hashes.(Citation: atomic-red proc file system) When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process’s memory.(Citation: MimiPenguin GitHub May 2017)(Citation: Polop Linux PrivEsc Gitbook)\n\nIf running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.",
	"external_references": [
		{
			"external_id": "T1003.007",
			"source_name": "mitre-attack",
			"url": "https://attack.mitre.org/techniques/T1003/007"
		},
		{
			"description": "Atomic Red Team. (2023, November). T1003.007 - OS Credential Dumping: Proc Filesystem. Retrieved March 28, 2024.",
			"source_name": "atomic-red proc file system",
			"url": "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.007/T1003.007.md"
		},
		{
			"description": "baeldung. (2022, April 8). Understanding the Linux /proc/id/maps File. Retrieved March 31, 2023.",
			"source_name": "baeldung Linux proc map 2022",
			"url": "https://www.baeldung.com/linux/proc-id-maps"
		},
		{
			"description": "Carlos Polop. (2023, March 5). Linux Privilege Escalation. Retrieved March 31, 2023.",
			"source_name": "Polop Linux PrivEsc Gitbook",
			"url": "https://book.hacktricks.xyz/linux-hardening/privilege-escalation#proc-usdpid-maps-and-proc-usdpid-mem"
		},
		{
			"description": "Gregal, H. (2017, May 12). MimiPenguin. Retrieved December 5, 2017.",
			"source_name": "MimiPenguin GitHub May 2017",
			"url": "https://github.com/huntergregal/mimipenguin"
		},
		{
			"description": "Huseyin Can YUCEEL & Picus Labs. (2022, March 22). Retrieved March 31, 2023.",
			"source_name": "Picus Labs Proc cump 2022",
			"url": "https://www.picussecurity.com/resource/the-mitre-attck-t1003-os-credential-dumping-technique-and-its-adversary-use"
		}
	],
	"kill_chain_phases": [
		{
			"kill_chain_name": "mitre-attack",
			"phase_name": "credential-access"
		}
	],
	"modified": "2024-04-10T16:41:01.496Z",
	"name": "Proc Filesystem",
	"object_marking_refs": [
		"marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
	],
	"revoked": false,
	"spec_version": "",
	"x_mitre_attack_spec_version": "3.2.0",
	"x_mitre_contributors": [
		"Tim (Wadhwa-)Brown"
	],
	"x_mitre_data_sources": [
		"Command: Command Execution",
		"File: File Access"
	],
	"x_mitre_deprecated": false,
	"x_mitre_detection": "To obtain the passwords and hashes stored in memory, processes must open a maps file in the `/proc` filesystem for the process being analyzed. This file is stored under the path `/proc/PID/maps`, where the `PID` directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.",
	"x_mitre_domains": [
		"enterprise-attack"
	],
	"x_mitre_is_subtechnique": true,
	"x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
	"x_mitre_platforms": [
		"Linux"
	],
	"x_mitre_version": "1.2"
}
