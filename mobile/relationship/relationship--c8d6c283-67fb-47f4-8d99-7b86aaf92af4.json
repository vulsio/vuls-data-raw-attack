{
  "type": "relationship",
  "id": "relationship--c8d6c283-67fb-47f4-8d99-7b86aaf92af4",
  "created": "2022-03-30T14:26:51.875Z",
  "created_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",
  "description": "Detection efforts should be placed finding differences between VBA source code and p-code.(Citation: Walmart Roberts Oct 2018) VBA code can be extracted from p-code before execution with tools such as the pcodedmp disassembler. The oletools toolkit leverages the pcodedmp disassembler to detect VBA stomping by comparing keywords present in the VBA source code and p-code.(Citation: pcodedmp Bontchev)(Citation: oletools toolkit)",
  "external_references": [
    {
      "description": "Sayre, K., Ogden, H., Roberts, C. (2018, October 10). VBA Stomping â€” Advanced Maldoc Techniques. Retrieved September 17, 2020.",
      "source_name": "Walmart Roberts Oct 2018",
      "url": "https://medium.com/walmartglobaltech/vba-stomping-advanced-maldoc-techniques-612c484ab278"
    },
    {
      "description": "Bontchev, V. (2019, July 30). pcodedmp.py - A VBA p-code disassembler. Retrieved September 17, 2020.",
      "source_name": "pcodedmp Bontchev",
      "url": "https://github.com/bontchev/pcodedmp"
    },
    {
      "description": "decalage2. (2019, December 3). python-oletools. Retrieved September 18, 2020.",
      "source_name": "oletools toolkit",
      "url": "https://github.com/decalage2/oletools"
    }
  ],
  "modified": "2022-03-30T14:26:51.875Z",
  "object_marking_refs": [
    "marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168"
  ],
  "relationship_type": "detects",
  "source_ref": "x-mitre-data-component--9f387817-df83-432a-b56b-a8fb7f71eedd",
  "spec_version": "",
  "target_ref": "attack-pattern--c898c4b5-bf36-4e6e-a4ad-5b8c4c13e35b",
  "x_mitre_attack_spec_version": "2.1.0",
  "x_mitre_modified_by_ref": "identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5"
}
